{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nexport const adminSlice = createSlice({\n  name: \"Admin\",\n  initialState: {\n    allUsers: null,\n    isFetching: false,\n    isSuccess: false,\n    isError: false,\n    errorMessage: \"\"\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getAllUser.fulfilled, (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.isFetching = false;\n      state.isSuccess = true;\n      state.allUsers = payload.allUsers;\n    });\n    builder.addCase(getAllUser.pending, state => {\n      state.isFetching = true;\n    });\n    builder.addCase(getAllUser.rejected, (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      state.isFetching = false;\n      state.isError = true;\n      state.errorMessage = payload.message;\n    });\n  }\n});\nexport const getAllUser = createAsyncThunk(\"/api/admin/getAllUser\", async (token, thunkAPI) => {\n  try {\n    const response = await fetch(\"/api/user/getAllUser\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    let data = await response.json();\n\n    if (response.status === 200) {\n      return data;\n    } else {\n      return thunkAPI.rejectWithValue(data);\n    }\n  } catch (e) {\n    console.log(\"Error\", e.response.data);\n    return thunkAPI.rejectWithValue(e.response.data);\n  }\n});\nexport const userSelector = state => state.user;\nexport default adminSlice.reducer;","map":{"version":3,"sources":["C:/Users/user/Desktop/Diploma/SEMESTER 5/PROJECT/FYP/frontend/src/features/admin/Admin.tsx"],"names":["createAsyncThunk","createSlice","adminSlice","name","initialState","allUsers","isFetching","isSuccess","isError","errorMessage","reducers","extraReducers","builder","addCase","getAllUser","fulfilled","state","payload","pending","rejected","message","token","thunkAPI","response","fetch","method","headers","Accept","Authorization","data","json","status","rejectWithValue","e","console","log","userSelector","user","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAGA,OAAO,MAAMC,UAAU,GAAGD,WAAW,CAAC;AAClCE,EAAAA,IAAI,EAAE,OAD4B;AAElCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,QAAQ,EAAE,IADA;AAEVC,IAAAA,UAAU,EAAE,KAFF;AAGVC,IAAAA,SAAS,EAAE,KAHD;AAIVC,IAAAA,OAAO,EAAE,KAJC;AAKVC,IAAAA,YAAY,EAAE;AALJ,GAFoB;AASlCC,EAAAA,QAAQ,EAAE,EATwB;AAYlCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxBA,IAAAA,OAAO,CAACC,OAAR,CAAgBC,UAAU,CAACC,SAA3B,EAAsC,CAACC,KAAD,WAA6B;AAAA,UAArB;AAAEC,QAAAA;AAAF,OAAqB;AAC/DD,MAAAA,KAAK,CAACV,UAAN,GAAmB,KAAnB;AACAU,MAAAA,KAAK,CAACT,SAAN,GAAkB,IAAlB;AACAS,MAAAA,KAAK,CAACX,QAAN,GAAiBY,OAAO,CAACZ,QAAzB;AACD,KAJH;AAKEO,IAAAA,OAAO,CAACC,OAAR,CAAgBC,UAAU,CAACI,OAA3B,EAAqCF,KAAD,IAAW;AAC7CA,MAAAA,KAAK,CAACV,UAAN,GAAmB,IAAnB;AACD,KAFD;AAGAM,IAAAA,OAAO,CAACC,OAAR,CAAgBC,UAAU,CAACK,QAA3B,EAAqC,CAACH,KAAD,YAA6B;AAAA,UAArB;AAAEC,QAAAA;AAAF,OAAqB;AAChED,MAAAA,KAAK,CAACV,UAAN,GAAmB,KAAnB;AACAU,MAAAA,KAAK,CAACR,OAAN,GAAgB,IAAhB;AACAQ,MAAAA,KAAK,CAACP,YAAN,GAAqBQ,OAAO,CAACG,OAA7B;AACH,KAJC;AAKL;AA1BiC,CAAD,CAA9B;AA6BP,OAAO,MAAMN,UAAU,GAAGd,gBAAgB,CACtC,uBADsC,EAEtC,OAAOqB,KAAP,EAAcC,QAAd,KAA2B;AACzB,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sBAAD,EAAyB;AACnDC,MAAAA,MAAM,EAAE,MAD2C;AAEnDC,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE,kBADD;AAEP,wBAAgB,kBAFT;AAGPC,QAAAA,aAAa,EAAG,UAASP,KAAM;AAHxB;AAF0C,KAAzB,CAA5B;AAQA,QAAIQ,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAT,EAAjB;;AAEA,QAAIP,QAAQ,CAACQ,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,aAAOF,IAAP;AACD,KAFD,MAEO;AACL,aAAOP,QAAQ,CAACU,eAAT,CAAyBH,IAAzB,CAAP;AACD;AACF,GAhBD,CAgBE,OAAOI,CAAP,EAAe;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,CAAC,CAACV,QAAF,CAAWM,IAAhC;AACA,WAAOP,QAAQ,CAACU,eAAT,CAAyBC,CAAC,CAACV,QAAF,CAAWM,IAApC,CAAP;AACD;AACF,CAvBqC,CAAnC;AA4BP,OAAO,MAAMO,YAAY,GAAIpB,KAAD,IAAsBA,KAAK,CAACqB,IAAjD;AACP,eAAenC,UAAU,CAACoC,OAA1B","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../../app/Store\";\r\n\r\nexport const adminSlice = createSlice({\r\n    name: \"Admin\",\r\n    initialState: {\r\n        allUsers: null,\r\n        isFetching: false,\r\n        isSuccess: false,\r\n        isError: false,\r\n        errorMessage: \"\",\r\n    },\r\n    reducers: {\r\n\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(getAllUser.fulfilled, (state, { payload }: any) => {\r\n            state.isFetching = false;\r\n            state.isSuccess = true;\r\n            state.allUsers = payload.allUsers\r\n          });\r\n          builder.addCase(getAllUser.pending, (state) => {\r\n            state.isFetching = true;\r\n          });\r\n          builder.addCase(getAllUser.rejected, (state, { payload }: any) => {\r\n            state.isFetching = false;\r\n            state.isError = true;\r\n            state.errorMessage = payload.message;\r\n        });\r\n    }\r\n});\r\n\r\nexport const getAllUser = createAsyncThunk(\r\n    \"/api/admin/getAllUser\",\r\n    async (token, thunkAPI) => {\r\n      try {\r\n        const response = await fetch(\"/api/user/getAllUser\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${token}`\r\n          },\r\n        });\r\n        let data = await response.json();\r\n  \r\n        if (response.status === 200) {\r\n          return data;\r\n        } else {\r\n          return thunkAPI.rejectWithValue(data);\r\n        }\r\n      } catch (e: any) {\r\n        console.log(\"Error\", e.response.data);\r\n        return thunkAPI.rejectWithValue(e.response.data);\r\n      }\r\n    }\r\n  );\r\n\r\n\r\n\r\nexport const userSelector = (state: RootState) => state.user;\r\nexport default adminSlice.reducer;"]},"metadata":{},"sourceType":"module"}