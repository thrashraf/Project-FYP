{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    user: null,\n    isFetching: false,\n    isSuccess: false,\n    isError: false,\n    errorMessage: \"\"\n  },\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: state => {\n      state.user = null;\n    }\n  }\n});\nexport const signupUser = createAsyncThunk(\"users/signupUser\", async (_ref, thunkAPI) => {\n  let {\n    name,\n    email,\n    password\n  } = _ref;\n\n  try {\n    const response = await fetch(\"/api/user/register\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name,\n        email,\n        password\n      })\n    });\n    let data = await response.json();\n\n    if (response.status === 200) {\n      console.log(\"data\", data);\n    } else {\n      return thunkAPI.rejectWithValue(data);\n    }\n  } catch (e) {\n    console.log(\"Error\", e.response.data);\n    return thunkAPI.rejectWithValue(e.response.data);\n  }\n});\nexport const {\n  login,\n  logout\n} = userSlice.actions;\nexport const userSelector = state => state.user;\nexport default userSlice.reducer;","map":{"version":3,"sources":["C:/Users/user/Desktop/Diploma/SEMESTER 5/PROJECT/FYP/frontend/src/features/user/User.tsx"],"names":["createAsyncThunk","createSlice","userSlice","name","initialState","user","isFetching","isSuccess","isError","errorMessage","reducers","login","state","action","payload","logout","signupUser","thunkAPI","email","password","response","fetch","method","headers","Accept","body","JSON","stringify","data","json","status","console","log","rejectWithValue","e","actions","userSelector","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAQA,OAAO,MAAMC,SAAS,GAAGD,WAAW,CAAC;AACjCE,EAAAA,IAAI,EAAE,MAD2B;AAEjCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,IAAI,EAAE,IADI;AAEVC,IAAAA,UAAU,EAAE,KAFF;AAGVC,IAAAA,SAAS,EAAE,KAHD;AAIVC,IAAAA,OAAO,EAAE,KAJC;AAKVC,IAAAA,YAAY,EAAE;AALJ,GAFmB;AASjCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,KAAK,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtBD,MAAAA,KAAK,CAACP,IAAN,GAAaQ,MAAM,CAACC,OAApB;AACH,KAHK;AAINC,IAAAA,MAAM,EAAGH,KAAD,IAAW;AACfA,MAAAA,KAAK,CAACP,IAAN,GAAa,IAAb;AACH;AANK;AATuB,CAAD,CAA7B;AAmBP,OAAO,MAAMW,UAAU,GAAGhB,gBAAgB,CACtC,kBADsC,EAEtC,aAAwCiB,QAAxC,KAAqD;AAAA,MAA9C;AAAEd,IAAAA,IAAF;AAAQe,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAA8C;;AACnD,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,oBAD0B,EAE1B;AACEC,MAAAA,MAAM,EAAE,MADV;AAEEC,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE,kBADD;AAEP,wBAAgB;AAFT,OAFX;AAMEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBxB,QAAAA,IADmB;AAEnBe,QAAAA,KAFmB;AAGnBC,QAAAA;AAHmB,OAAf;AANR,KAF0B,CAA5B;AAeA,QAAIS,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAT,EAAjB;;AAEA,QAAIT,QAAQ,CAACU,MAAT,KAAoB,GAAxB,EAA6B;AAC3BC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBJ,IAApB;AACD,KAFD,MAEO;AACL,aAAOX,QAAQ,CAACgB,eAAT,CAAyBL,IAAzB,CAAP;AACD;AACF,GAvBD,CAuBE,OAAOM,CAAP,EAAe;AACfH,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBE,CAAC,CAACd,QAAF,CAAWQ,IAAhC;AACA,WAAOX,QAAQ,CAACgB,eAAT,CAAyBC,CAAC,CAACd,QAAF,CAAWQ,IAApC,CAAP;AACD;AACF,CA9BqC,CAAnC;AAiCP,OAAO,MAAM;AAAEjB,EAAAA,KAAF;AAASI,EAAAA;AAAT,IAAoBb,SAAS,CAACiC,OAApC;AAEP,OAAO,MAAMC,YAAY,GAAIxB,KAAD,IAAsBA,KAAK,CAACP,IAAjD;AAEP,eAAeH,SAAS,CAACmC,OAAzB","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\"\r\nimport { RootState } from \"../../app/Store\";\r\ninterface user {\r\n    name: string,\r\n    email: string,\r\n    password: string\r\n}\r\n\r\nexport const userSlice = createSlice({\r\n    name: \"user\",\r\n    initialState: {\r\n        user: null,\r\n        isFetching: false,\r\n        isSuccess: false,\r\n        isError: false,\r\n        errorMessage: \"\"\r\n    },\r\n    reducers: {\r\n        login: (state, action) => {\r\n            state.user = action.payload;\r\n        },\r\n        logout: (state) => {\r\n            state.user = null\r\n        }\r\n    }\r\n});\r\n\r\nexport const signupUser = createAsyncThunk(\r\n    \"users/signupUser\",\r\n    async ({ name, email, password }: user, thunkAPI) => {\r\n      try {\r\n        const response = await fetch(\r\n          \"/api/user/register\",\r\n          {\r\n            method: \"POST\",\r\n            headers: {\r\n              Accept: \"application/json\",\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n              name,\r\n              email,\r\n              password,\r\n            }),\r\n          }\r\n        )\r\n        let data = await response.json()\r\n        \r\n        if (response.status === 200) {\r\n          console.log(\"data\", data)\r\n        } else {\r\n          return thunkAPI.rejectWithValue(data)\r\n        }\r\n      } catch (e: any) {\r\n        console.log(\"Error\", e.response.data)\r\n        return thunkAPI.rejectWithValue(e.response.data)\r\n      }\r\n    }\r\n)\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const userSelector = (state: RootState) => state.user;\r\n\r\nexport default userSlice.reducer;"]},"metadata":{},"sourceType":"module"}