{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport jwt_decode from 'jwt-decode';\n\nconst initialState = () => ({\n  user: null,\n  token: null,\n  isFetching: false,\n  isSuccess: false,\n  isError: false,\n  errorMessage: \"\",\n  redirect: ''\n});\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: initialState(),\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: state => {\n      state.user = null;\n    },\n    clearState: () => initialState()\n  },\n  extraReducers: builder => {\n    builder.addCase(signupUser.fulfilled, (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.isFetching = false;\n      state.isSuccess = true;\n    });\n    builder.addCase(signupUser.pending, state => {\n      state.isFetching = true;\n    });\n    builder.addCase(signupUser.rejected, (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      state.isFetching = false;\n      state.isError = true;\n      state.errorMessage = payload.message;\n    });\n    builder.addCase(loginUser.fulfilled, (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      state.isFetching = false;\n      state.isSuccess = true;\n      state.redirect = payload.route;\n      state.user = jwt_decode(payload.accessToken);\n      state.token = payload.accessToken;\n    });\n    builder.addCase(loginUser.pending, state => {\n      state.isFetching = true;\n    });\n    builder.addCase(loginUser.rejected, (state, _ref4) => {\n      let {\n        payload\n      } = _ref4;\n      state.isFetching = false;\n      state.isError = true;\n      state.errorMessage = payload.message;\n    });\n    builder.addCase(refreshUser.fulfilled, (state, _ref5) => {\n      let {\n        payload\n      } = _ref5;\n      state.isFetching = false;\n      state.isSuccess = true;\n      state.user = jwt_decode(payload.accessToken);\n      state.token = payload.accessToken;\n    });\n    builder.addCase(refreshUser.pending, state => {\n      state.isFetching = true;\n    });\n    builder.addCase(refreshUser.rejected, (state, _ref6) => {\n      let {\n        payload\n      } = _ref6;\n      state.isFetching = false;\n      state.isError = true;\n      state.errorMessage = payload.message;\n    });\n  }\n});\nexport const signupUser = createAsyncThunk(\"users/signupUser\", async (_ref7, thunkAPI) => {\n  let {\n    name,\n    email,\n    password\n  } = _ref7;\n\n  try {\n    const response = await fetch(\"/api/user/register\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name,\n        email,\n        password\n      })\n    });\n    let data = await response.json();\n\n    if (response.status === 200) {\n      console.log(\"data\", data);\n    } else {\n      return thunkAPI.rejectWithValue(data);\n    }\n  } catch (e) {\n    console.log(\"Error\", e.response.data);\n    return thunkAPI.rejectWithValue(e.response.data);\n  }\n});\nexport const loginUser = createAsyncThunk(\"users/login\", async (_ref8, thunkAPI) => {\n  let {\n    email,\n    password\n  } = _ref8;\n\n  try {\n    const response = await fetch(\"/api/user/login\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    let data = await response.json();\n    console.log(\"response\", data);\n\n    if (response.status === 200) {\n      return data;\n    } else {\n      return thunkAPI.rejectWithValue(data);\n    }\n  } catch (e) {\n    console.log(\"Error\", e.response.data);\n    thunkAPI.rejectWithValue(e.response.data);\n  }\n});\nexport const refreshUser = createAsyncThunk(\"users/token\", async (_, thunkAPI) => {\n  try {\n    const response = await fetch(\"/api/user/token\", {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    let data = await response.json();\n    console.log(\"response\", data);\n\n    if (response.status === 200) {\n      return data;\n    } else {\n      return thunkAPI.rejectWithValue(data);\n    }\n  } catch (e) {\n    console.log(\"Error\", e.response.data);\n    thunkAPI.rejectWithValue(e.response.data);\n  }\n});\nexport const {\n  login,\n  logout,\n  clearState\n} = userSlice.actions;\nexport const userSelector = state => state.user;\nexport default userSlice.reducer;","map":{"version":3,"sources":["C:/Users/user/Desktop/Diploma/SEMESTER 5/PROJECT/FYP/frontend/src/features/user/User.tsx"],"names":["createAsyncThunk","createSlice","jwt_decode","initialState","user","token","isFetching","isSuccess","isError","errorMessage","redirect","userSlice","name","reducers","login","state","action","payload","logout","clearState","extraReducers","builder","addCase","signupUser","fulfilled","pending","rejected","message","loginUser","route","accessToken","refreshUser","thunkAPI","email","password","response","fetch","method","headers","Accept","body","JSON","stringify","data","json","status","console","log","rejectWithValue","e","_","actions","userSelector","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAEA,OAAOC,UAAP,MAAuB,YAAvB;;AAaA,MAAMC,YAAY,GAAG,OAAO;AAC1BC,EAAAA,IAAI,EAAE,IADoB;AAE1BC,EAAAA,KAAK,EAAE,IAFmB;AAG1BC,EAAAA,UAAU,EAAE,KAHc;AAI1BC,EAAAA,SAAS,EAAE,KAJe;AAK1BC,EAAAA,OAAO,EAAE,KALiB;AAM1BC,EAAAA,YAAY,EAAE,EANY;AAO1BC,EAAAA,QAAQ,EAAE;AAPgB,CAAP,CAArB;;AAUA,OAAO,MAAMC,SAAS,GAAGV,WAAW,CAAC;AACnCW,EAAAA,IAAI,EAAE,MAD6B;AAEnCT,EAAAA,YAAY,EAAEA,YAAY,EAFS;AAGnCU,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxBD,MAAAA,KAAK,CAACX,IAAN,GAAaY,MAAM,CAACC,OAApB;AACD,KAHO;AAIRC,IAAAA,MAAM,EAAGH,KAAD,IAAW;AACjBA,MAAAA,KAAK,CAACX,IAAN,GAAa,IAAb;AACD,KANO;AAORe,IAAAA,UAAU,EAAE,MAAMhB,YAAY;AAPtB,GAHyB;AAanCiB,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBC,UAAU,CAACC,SAA3B,EAAsC,CAACT,KAAD,WAA6B;AAAA,UAArB;AAAEE,QAAAA;AAAF,OAAqB;AACjEF,MAAAA,KAAK,CAACT,UAAN,GAAmB,KAAnB;AACAS,MAAAA,KAAK,CAACR,SAAN,GAAkB,IAAlB;AACD,KAHD;AAIAc,IAAAA,OAAO,CAACC,OAAR,CAAgBC,UAAU,CAACE,OAA3B,EAAqCV,KAAD,IAAW;AAC7CA,MAAAA,KAAK,CAACT,UAAN,GAAmB,IAAnB;AACD,KAFD;AAGAe,IAAAA,OAAO,CAACC,OAAR,CAAgBC,UAAU,CAACG,QAA3B,EAAqC,CAACX,KAAD,YAA6B;AAAA,UAArB;AAAEE,QAAAA;AAAF,OAAqB;AAChEF,MAAAA,KAAK,CAACT,UAAN,GAAmB,KAAnB;AACAS,MAAAA,KAAK,CAACP,OAAN,GAAgB,IAAhB;AACAO,MAAAA,KAAK,CAACN,YAAN,GAAqBQ,OAAO,CAACU,OAA7B;AACD,KAJD;AAKAN,IAAAA,OAAO,CAACC,OAAR,CAAgBM,SAAS,CAACJ,SAA1B,EAAqC,CAACT,KAAD,YAA6B;AAAA,UAArB;AAAEE,QAAAA;AAAF,OAAqB;AAChEF,MAAAA,KAAK,CAACT,UAAN,GAAmB,KAAnB;AACAS,MAAAA,KAAK,CAACR,SAAN,GAAkB,IAAlB;AACAQ,MAAAA,KAAK,CAACL,QAAN,GAAiBO,OAAO,CAACY,KAAzB;AACAd,MAAAA,KAAK,CAACX,IAAN,GAAaF,UAAU,CAACe,OAAO,CAACa,WAAT,CAAvB;AACAf,MAAAA,KAAK,CAACV,KAAN,GAAcY,OAAO,CAACa,WAAtB;AACD,KAND;AAOAT,IAAAA,OAAO,CAACC,OAAR,CAAgBM,SAAS,CAACH,OAA1B,EAAoCV,KAAD,IAAW;AAC5CA,MAAAA,KAAK,CAACT,UAAN,GAAmB,IAAnB;AACD,KAFD;AAGAe,IAAAA,OAAO,CAACC,OAAR,CAAgBM,SAAS,CAACF,QAA1B,EAAoC,CAACX,KAAD,YAA6B;AAAA,UAArB;AAAEE,QAAAA;AAAF,OAAqB;AAC/DF,MAAAA,KAAK,CAACT,UAAN,GAAmB,KAAnB;AACAS,MAAAA,KAAK,CAACP,OAAN,GAAgB,IAAhB;AACAO,MAAAA,KAAK,CAACN,YAAN,GAAqBQ,OAAO,CAACU,OAA7B;AACD,KAJD;AAKAN,IAAAA,OAAO,CAACC,OAAR,CAAgBS,WAAW,CAACP,SAA5B,EAAuC,CAACT,KAAD,YAA6B;AAAA,UAArB;AAAEE,QAAAA;AAAF,OAAqB;AAClEF,MAAAA,KAAK,CAACT,UAAN,GAAmB,KAAnB;AACAS,MAAAA,KAAK,CAACR,SAAN,GAAkB,IAAlB;AACAQ,MAAAA,KAAK,CAACX,IAAN,GAAaF,UAAU,CAACe,OAAO,CAACa,WAAT,CAAvB;AACAf,MAAAA,KAAK,CAACV,KAAN,GAAcY,OAAO,CAACa,WAAtB;AACD,KALD;AAMAT,IAAAA,OAAO,CAACC,OAAR,CAAgBS,WAAW,CAACN,OAA5B,EAAsCV,KAAD,IAAW;AAC9CA,MAAAA,KAAK,CAACT,UAAN,GAAmB,IAAnB;AACD,KAFD;AAGAe,IAAAA,OAAO,CAACC,OAAR,CAAgBS,WAAW,CAACL,QAA5B,EAAsC,CAACX,KAAD,YAA6B;AAAA,UAArB;AAAEE,QAAAA;AAAF,OAAqB;AACjEF,MAAAA,KAAK,CAACT,UAAN,GAAmB,KAAnB;AACAS,MAAAA,KAAK,CAACP,OAAN,GAAgB,IAAhB;AACAO,MAAAA,KAAK,CAACN,YAAN,GAAqBQ,OAAO,CAACU,OAA7B;AACD,KAJD;AAMD;AAxDkC,CAAD,CAA7B;AA2DP,OAAO,MAAMJ,UAAU,GAAGvB,gBAAgB,CACxC,kBADwC,EAExC,cAAwCgC,QAAxC,KAAqD;AAAA,MAA9C;AAAEpB,IAAAA,IAAF;AAAQqB,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAA8C;;AACnD,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oBAAD,EAAuB;AACjDC,MAAAA,MAAM,EAAE,MADyC;AAEjDC,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE,kBADD;AAEP,wBAAgB;AAFT,OAFwC;AAMjDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnB9B,QAAAA,IADmB;AAEnBqB,QAAAA,KAFmB;AAGnBC,QAAAA;AAHmB,OAAf;AAN2C,KAAvB,CAA5B;AAYA,QAAIS,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAT,EAAjB;;AAEA,QAAIT,QAAQ,CAACU,MAAT,KAAoB,GAAxB,EAA6B;AAC3BC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBJ,IAApB;AACD,KAFD,MAEO;AACL,aAAOX,QAAQ,CAACgB,eAAT,CAAyBL,IAAzB,CAAP;AACD;AACF,GApBD,CAoBE,OAAOM,CAAP,EAAe;AACfH,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBE,CAAC,CAACd,QAAF,CAAWQ,IAAhC;AACA,WAAOX,QAAQ,CAACgB,eAAT,CAAyBC,CAAC,CAACd,QAAF,CAAWQ,IAApC,CAAP;AACD;AACF,CA3BuC,CAAnC;AA+BP,OAAO,MAAMf,SAAS,GAAG5B,gBAAgB,CACvC,aADuC,EAEvC,cAA4CgC,QAA5C,KAAyD;AAAA,MAAlD;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAkD;;AACvD,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,iBAD0B,EAE1B;AACEC,MAAAA,MAAM,EAAE,MADV;AAEEC,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE,kBADD;AAEP,wBAAgB;AAFT,OAFX;AAMEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBT,QAAAA,KADmB;AAEnBC,QAAAA;AAFmB,OAAf;AANR,KAF0B,CAA5B;AAcA,QAAIS,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAT,EAAjB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBJ,IAAxB;;AACA,QAAIR,QAAQ,CAACU,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,aAAOF,IAAP;AACD,KAFD,MAEO;AACL,aAAOX,QAAQ,CAACgB,eAAT,CAAyBL,IAAzB,CAAP;AACD;AACF,GAtBD,CAsBE,OAAOM,CAAP,EAAe;AACfH,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBE,CAAC,CAACd,QAAF,CAAWQ,IAAhC;AACAX,IAAAA,QAAQ,CAACgB,eAAT,CAAyBC,CAAC,CAACd,QAAF,CAAWQ,IAApC;AACD;AACF,CA7BsC,CAAlC;AAgCP,OAAO,MAAMZ,WAAW,GAAG/B,gBAAgB,CACzC,aADyC,EAEzC,OAAOkD,CAAP,EAAUlB,QAAV,KAA4B;AAC1B,MAAI;AACF,UAAMG,QAAQ,GAAG,MAAMC,KAAK,CAC1B,iBAD0B,EAE1B;AACEC,MAAAA,MAAM,EAAE,KADV;AAEEC,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE,kBADD;AAEP,wBAAgB;AAFT;AAFX,KAF0B,CAA5B;AAUA,QAAII,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAT,EAAjB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBJ,IAAxB;;AACA,QAAIR,QAAQ,CAACU,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,aAAOF,IAAP;AACD,KAFD,MAEO;AACL,aAAOX,QAAQ,CAACgB,eAAT,CAAyBL,IAAzB,CAAP;AACD;AACF,GAlBD,CAkBE,OAAOM,CAAP,EAAe;AACfH,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBE,CAAC,CAACd,QAAF,CAAWQ,IAAhC;AACAX,IAAAA,QAAQ,CAACgB,eAAT,CAAyBC,CAAC,CAACd,QAAF,CAAWQ,IAApC;AACD;AACF,CAzBwC,CAApC;AA4BP,OAAO,MAAM;AAAE7B,EAAAA,KAAF;AAASI,EAAAA,MAAT;AAAiBC,EAAAA;AAAjB,IAAgCR,SAAS,CAACwC,OAAhD;AACP,OAAO,MAAMC,YAAY,GAAIrC,KAAD,IAAsBA,KAAK,CAACX,IAAjD;AACP,eAAeO,SAAS,CAAC0C,OAAzB","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../../app/Store\";\r\nimport jwt_decode from 'jwt-decode';\r\n\r\ninterface loginInterface{\r\n  email: string;\r\n  password: string;\r\n\r\n}\r\ninterface user {\r\n  name: string;\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nconst initialState = () => ({\r\n  user: null,\r\n  token: null,\r\n  isFetching: false,\r\n  isSuccess: false,\r\n  isError: false,\r\n  errorMessage: \"\",\r\n  redirect: ''\r\n});\r\n\r\nexport const userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState: initialState(),\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null;\r\n    },\r\n    clearState: () => initialState(),\r\n    \r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(signupUser.fulfilled, (state, { payload }: any) => {\r\n      state.isFetching = false;\r\n      state.isSuccess = true;\r\n    });\r\n    builder.addCase(signupUser.pending, (state) => {\r\n      state.isFetching = true;\r\n    });\r\n    builder.addCase(signupUser.rejected, (state, { payload }: any) => {\r\n      state.isFetching = false;\r\n      state.isError = true;\r\n      state.errorMessage = payload.message;\r\n    });\r\n    builder.addCase(loginUser.fulfilled, (state, { payload }: any) => {\r\n      state.isFetching = false;\r\n      state.isSuccess = true;\r\n      state.redirect = payload.route;\r\n      state.user = jwt_decode(payload.accessToken);\r\n      state.token = payload.accessToken;\r\n    });\r\n    builder.addCase(loginUser.pending, (state) => {\r\n      state.isFetching = true;\r\n    });\r\n    builder.addCase(loginUser.rejected, (state, { payload }: any) => {\r\n      state.isFetching = false;\r\n      state.isError = true;\r\n      state.errorMessage = payload.message;\r\n    });\r\n    builder.addCase(refreshUser.fulfilled, (state, { payload }: any) => {\r\n      state.isFetching = false;\r\n      state.isSuccess = true;\r\n      state.user = jwt_decode(payload.accessToken);\r\n      state.token = payload.accessToken;\r\n    });\r\n    builder.addCase(refreshUser.pending, (state) => {\r\n      state.isFetching = true;\r\n    });\r\n    builder.addCase(refreshUser.rejected, (state, { payload }: any) => {\r\n      state.isFetching = false;\r\n      state.isError = true;\r\n      state.errorMessage = payload.message;\r\n    });\r\n\r\n  },\r\n});\r\n\r\nexport const signupUser = createAsyncThunk(\r\n  \"users/signupUser\",\r\n  async ({ name, email, password }: user, thunkAPI) => {\r\n    try {\r\n      const response = await fetch(\"/api/user/register\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          name,\r\n          email,\r\n          password,\r\n        }),\r\n      });\r\n      let data = await response.json();\r\n\r\n      if (response.status === 200) {\r\n        console.log(\"data\", data);\r\n      } else {\r\n        return thunkAPI.rejectWithValue(data);\r\n      }\r\n    } catch (e: any) {\r\n      console.log(\"Error\", e.response.data);\r\n      return thunkAPI.rejectWithValue(e.response.data);\r\n    }\r\n  }\r\n);\r\n\r\n\r\nexport const loginUser = createAsyncThunk(\r\n  \"users/login\",\r\n  async ({ email, password }: loginInterface, thunkAPI) => {\r\n    try {\r\n      const response = await fetch(\r\n        \"/api/user/login\",\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            email,\r\n            password,\r\n          }),\r\n        }\r\n      )\r\n      let data = await response.json()\r\n      console.log(\"response\", data)\r\n      if (response.status === 200) {\r\n        return data\r\n      } else {\r\n        return thunkAPI.rejectWithValue(data)\r\n      }\r\n    } catch (e: any) {\r\n      console.log(\"Error\", e.response.data)\r\n      thunkAPI.rejectWithValue(e.response.data)\r\n    }\r\n  }\r\n)\r\n\r\nexport const refreshUser = createAsyncThunk(\r\n  \"users/token\",\r\n  async (_, thunkAPI: any) => {\r\n    try {\r\n      const response = await fetch(\r\n        \"/api/user/token\",\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      )\r\n      let data = await response.json()\r\n      console.log(\"response\", data)\r\n      if (response.status === 200) {\r\n        return data\r\n      } else {\r\n        return thunkAPI.rejectWithValue(data)\r\n      }\r\n    } catch (e: any) {\r\n      console.log(\"Error\", e.response.data)\r\n      thunkAPI.rejectWithValue(e.response.data)\r\n    }\r\n  }\r\n)\r\n\r\nexport const { login, logout, clearState } = userSlice.actions;\r\nexport const userSelector = (state: RootState) => state.user;\r\nexport default userSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}